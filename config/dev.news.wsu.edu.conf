################################################################
# news.wsu.edu nginx configuration
server {
    listen         80;
    server_name    www.news.wsu.edu;
    return 301     http://news.wsu.edu$request_uri;
}

server {
    listen        80;
    server_name   announcements.wsu.edu *.announcements.wsu.edu;
    return 301    http://news.wsu.edu/announcements/;
}

server {
    listen       80;
    server_name  dev.news.wsu.edu;
    root         /var/www/news.wsu.edu/wordpress;

    # Enables the Vary: Accept-Encoding header for gzipped content.
    gzip_vary on;

    # Enable the nginx pagespeed module.
    pagespeed on;

    # Provide a writeable path for cache to be stored
    # @todo - consider memory rather than filesystem
    pagespeed FileCachePath /var/ngx_pagespeed_cache;

    # Enable the tracking and logging of statistics. See
    # location blocks below for accessing data.
    pagespeed Statistics on;
    pagespeed StatisticsLogging on;

    # Allow pagespeed to use our memcached server.
    pagespeed MemcachedServers "127.0.0.1:11211";

    # Ensure requests for pagespeed optimized resources go to the pagespeed
    # handler and no extraneous headers get set.
    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
        add_header "" "";
    }

    location ~ "^/ngx_pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" { }

    # Location blocks for viewing data.
    #
    # Only allow all in development.
    location /ngx_pagespeed_statistics { allow all; }
    location /ngx_pagespeed_global_statistics { allow all; }
    location /ngx_pagespeed_message { allow all; }

    location / {
        index index.php;
        try_files $uri $uri/ /index.php$is_args$args;
    }

    # Serve static assets under wp-content directly. Because wp-content
    # is one level up, we pass the requested data as an alias.
    location ~* ^(/wp-content/)(.*)(\.js|css|png|jpg|jpeg|gif|ico)$ {
        expires 7d;
        alias /var/www/news.wsu.edu$1$2$3;
        log_not_found off;
    }

    # Serve static assets under wp-content directly. Because wp-content
    # is one level up, we pass the requested data as an alias.
    location ~* ^(/Content/)(.*)(\.js|css|png|jpg|jpeg|gif|ico)$ {
        expires 365d;
        alias /var/www/news.wsu.edu$1$2$3;
        log_not_found off;
    }

    # Serve the favicon from this domain.
    location ~ ^/favicon.ico$ {
        expires 30d;
        alias /var/www/news.wsu.edu/favicon.ico;
    }

    location ~ ^/Content/(.*)$ {
        alias /var/www/news.wsu.edu/Content/$1;
    }

    location ~ ^/wp-content/(.*)$ {
        alias /var/www/news.wsu.edu/wp-content/$1;
    }

    # Add trailing slash to */wp-admin requests.
    rewrite /wp-admin$ $scheme://$host$uri/ permanent;

    # Handle all static assets by serving the file directly. Add directives 
    # to send expires headers and turn off 404 error logging.
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires 7d;
        log_not_found off;
    }

    # this prevents hidden files (beginning with a period) from being served
    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Via https://github.com/h5bp/server-configs-nginx/
    #
    # Prevent a variety of file extensions associated with backups and configs
    # from being served.
    location ~* (?:\.(?:bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Pass uploaded files to wp-includes/ms-files.php.
    rewrite /files/$ /index.php last;

    if ($uri !~ wp-content/plugins) {
        rewrite /files/(.+)$ /wp-includes/ms-files.php?file=$1 last;
    }

    # Rewrite multisite in a subdirectory '.../wp-.*' and '.../*.php'.
    if (!-e $request_filename) {
        rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
        rewrite ^/[_0-9a-zA-Z-]+.*(/wp-admin/.*\.php)$ $1 last;
        rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
    }

    location ~ \.php$ {
        client_max_body_size 50M;
        try_files      $uri =404;

        # Include the fastcgi_params defaults provided by nginx
        include        /etc/nginx/fastcgi_params;
        fastcgi_read_timeout 3600s;

        # SCRIPT_FILENAME is a required parameter for things to work properly,
        # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
        # We define it here to be sure that it exists.
        fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

        # Use the upstream for php5-fpm that we defined in nginx.conf
        fastcgi_pass   php;

        # And get to serving the file!
        fastcgi_index  index.php;
    }

}